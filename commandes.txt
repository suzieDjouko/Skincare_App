docker compose up --build

npm test

npx cross-env NODE_ENV=test jest

ORM für relationale Datenbanken sequelize 
exp: const users = await User.findAll();


ODM für Mongo DB -Mongoose
exp: const users = await UserModel.find();

Für die relationale Datenbank (PostgreSQL) nutzen wir 
das ORM Sequelize, und für die NoSQL-Datenbank (MongoDB) 
verwenden wir das ODM Mongoose. Beide Tools ermöglichen uns, 
Datenbankzugriffe objektorientiert zu schreiben und erleichtern so die Einhaltung von Clean-Code-Prinzipien.“


SERVICES DANS LE BACKEND
Passwortverschlüsselung mit bcrypt 
und JWT-Token-Erzeugung für die Authentifizierung.

Wir benutzen das modul dotenv, um Umgebungsvariablen wie Datenbankzugang,
Passwörter und Ports aus einer .env-Datei zu laden.

db.ts :
Dieses Modul initialisiert die Verbindung zur PostgreSQL-Datenbank 
mit Sequelize unter 
Verwendung von Umgebungsvariablen aus der .env-Datei

Mongodb.ts:
Dieser Code stellt eine Verbindung zur MongoDB-Datenbank her 
– mit der Bibliothek Mongoose.

PostgreSQL
-order
-User
-payment


Mongoose:
-produckts
-Quiz
-warenkorb
-skinanalyse





psql -U postgres -d skincare



DELETE FROM payments;
DELETE FROM orders;
DELETE FROM users;

INSERT INTO users (u_name, u_email, u_password, u_role)
VALUES 
  ('Jens Kohler', 'jens.kohler@example.com', '$2b$10$nZmLZHRSS3CAA0zp4YneoOMqgR76C05G6OtzKmhlLUEyLM2m0blo6', 'admin'),
  ('Test Admin', 'test.admin@example.com', '$2b$10$b3kxL8jgw9Nl.T/pm7d/l.sg.eR2wOy4EOUxvR9kLgBryqBzhj9UC', 'admin'),
  ('Test Admin 2', 'admin2@example.com', '$2b$10$uGdd2JJ6Q6xqxuxEv0dQ2O2WPSrrFSmvGZB7zKKQ3Aik45uw.3ieS', 'admin'),
  ('Test User', 'test.user@example.com', '$2b$10$EpLfTG8PVs09sb0nl5/BsOQI3Lj8K2og9za9lcj2SZsP5DICoLPaO', 'user'),
  ('Test User A', 'testa@example.com', '$2b$10$XpxX7IqU5QdZasSChR4FUevyKGHN1nAKaAqqbXerVoBZpyHQkJgM6', 'user'),
  ('Test User B', 'testb@example.com', '$2b$10$XpxX7IqU5QdZasSChR4FUevyKGHN1nAKaAqqbXerVoBZpyHQkJgM6', 'user')
ON CONFLICT (u_email) DO NOTHING;

SELECT * FROM users;
